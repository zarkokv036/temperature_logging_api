/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_EEPROM_H
#define _MOCK_EEPROM_H

#include "unity.h"
#include "eeprom.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_eeprom_Init(void);
void mock_eeprom_Destroy(void);
void mock_eeprom_Verify(void);




#define eeprom_write_IgnoreAndReturn(cmock_retval) eeprom_write_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eeprom_write_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define eeprom_write_StopIgnore() eeprom_write_CMockStopIgnore()
void eeprom_write_CMockStopIgnore(void);
#define eeprom_write_ExpectAndReturn(address, data, length, cmock_retval) eeprom_write_CMockExpectAndReturn(__LINE__, address, data, length, cmock_retval)
void eeprom_write_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t address, const uint8_t* data, uint16_t length, int cmock_to_return);
typedef int (* CMOCK_eeprom_write_CALLBACK)(uint16_t address, const uint8_t* data, uint16_t length, int cmock_num_calls);
void eeprom_write_AddCallback(CMOCK_eeprom_write_CALLBACK Callback);
void eeprom_write_Stub(CMOCK_eeprom_write_CALLBACK Callback);
#define eeprom_write_StubWithCallback eeprom_write_Stub
#define eeprom_read_IgnoreAndReturn(cmock_retval) eeprom_read_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void eeprom_read_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define eeprom_read_StopIgnore() eeprom_read_CMockStopIgnore()
void eeprom_read_CMockStopIgnore(void);
#define eeprom_read_ExpectAndReturn(address, data, length, cmock_retval) eeprom_read_CMockExpectAndReturn(__LINE__, address, data, length, cmock_retval)
void eeprom_read_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t address, uint8_t* data, uint16_t length, int cmock_to_return);
typedef int (* CMOCK_eeprom_read_CALLBACK)(uint16_t address, uint8_t* data, uint16_t length, int cmock_num_calls);
void eeprom_read_AddCallback(CMOCK_eeprom_read_CALLBACK Callback);
void eeprom_read_Stub(CMOCK_eeprom_read_CALLBACK Callback);
#define eeprom_read_StubWithCallback eeprom_read_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
